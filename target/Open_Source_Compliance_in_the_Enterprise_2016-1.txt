OPEN SOURCE COMPLIANCE IN THE ENTERPRISE


Ibrahim Haddad, PhD


This page intentionally left blank.


Ibrahim Haddad, Ph.D.

The Linux Foundation

2016

Open Source Compliance in the Enterprise




4


Copyright c 2016 The Linux Foundation

All rights reserved



5


Contents


Chapter 1 INTRODUCTION TO OPEN SOURCE COMPLIANCE 16

A CHANGING BUSINESS ENVIRONMENT 16

ENTER OPEN SOURCE COMPLIANCE 19

Benefits of Ensuring Open Source Compliance 20

FAILURE TO COMPLY 21

Intellectual Property Failures 22

License Compliance Problems 24

Process Failures 26

LESSONS LEARNED 28

Ensure Compliance Prior to Product Shipment/Service Launch 28

Non-Compliance is Expensive 29

Relationships Matter 30

Training is Important 30


Chapter 2 ESTABLISHING AN OPEN SOURCE MANAGEMENT PROGRAM 31

OPEN SOURCE COMPLIANCE PROGRAM 31

Compliance Strategy 32

Inquiry Response Strategy 32

Policies and Processes 32

Compliance Teams 33

Tools 34

Web Presence 35

Education 36

Automation 37



Messaging 37

COMPLIANCE CHALLENGES AND SOLUTIONS 37

Long-Term Goals versus Short-Term Execution 39

Communicating Compliance 40

Establishing a Clean Software Baseline 41

Maintaining Compliance 42

Institutionalization and Sustainability 43

Chapter 3 ACHIEVING COMPLIANCE: ROLES AND RESPONSIBILITIES 46

OPEN SOURCE REVIEW BOARD (OSRB) 50

LEGAL 53

ENGINEERING AND PRODUCT TEAMS 55

COMPLIANCE OFFICER 57

OPEN SOURCE EXECUTIVE COMMITTEE 58

DOCUMENTATION 58

LOCALIZATION 59

SUPPLY CHAIN 59

IT 60

CORPORATE DEVELOPMENT 60


Chapter 4 OPEN SOURCE COMPLIANCE PROCESS 62

EFFECTIVE COMPLIANCE 63

ELEMENTS OF AN END-TO-END COMPLIANCE PROCESS 64

ステップ1Identification of Open Source 65

ステップ 2 . Auditing Source Code 67

ステップ3Resolving Issues 70



ステップ4Reviews 70

ステップ5Approvals 72

ステップ6Registration 73

ステップ7Notices 74

ステップ8. Pre-Distribution Verifications 75

ステップ9Distribution 76

ステップ10Final Verifications 76


Chapter 5 COMPLIANCE PROCESSES AND POLICIES 78

POLICY 78

PROCESS 79

Source Code Scan 79

Identification and Resolution 81

Legal Review 81

Architecture Review 82

Final Review 83

PROCESS STAGES’ INPUTS AND OUTPUTS 83

Source Code Scan Phase 84

Identification and Resolution Phase 85

Legal Review Phase 85

Architecture Review Phase 87

Final Approval Phase 87

DETAILED USAGE PROCESS 88

INCREMENTAL COMPLIANCE PROCESS 93

OSRB USAGE FORM 95

Rules Governing the OSRB Usage Form 99



AUDITING 99

SOURCE CODE DISTRIBUTION 100

Distribution Incentives 100

Distribution Policy and Process 101

Distribution Methods and Modes 103

Distribution Checklists 104

Pre-Distribution Checklist 105

Post-Publication Checklist 107

Written Offer 107


Chapter 6 RECOMMENDED PRACTICES FOR COMPLIANCE PROCESS MANAGEMENT 109

COMPLIANCE PROCESS 109

Identification Phase 109

Source Code Auditing 111

Resolving Issues 112

Reviews 113

Approvals 114

Notices 115

Verifications 115

TOOLS AND AUTOMATION 116

Source Code Identification Tools 117

Project Management Tools 118

Software Bill of Material (BOM) Difference Tools 118

Linkage Analysis Tool 119



CHAPTER 7 MANAGING COMPLIANCE INQUIRIES 121

RESPONDING TO COMPLIANCE INQUIRIES 122

Acknowledge 122

Inform 123

Investigate 123

Report 123

Close Inquiry 124

Rectify 124

Improve 124

General Considerations 124


CHAPTER 8 OTHER COMPLIANCE-RELATED PRACTICES 125

EMPLOYEE APPRAISAL 125

WEB PORTALS 126

MESSAGING 126

TRAINING 127

Informal Training 127

Formal Training 128

SOURCE CODE MODIFICATION CONSIDERATIONS 128

NOTICES CONSIDERATIONS 128

DISTRIBUTION CONSIDERATIONS 129

USAGE CONSIDERATIONS 130

ATTRIBUTION CONSIDERATIONS 132

Attribution Types 132

Presentation of Attributions 133



SPECIFIC LICENSE OBLIGATIONS 133

GENERAL GUIDELINES 135


Chapter 9 SCALING OPEN SOURCE LEGAL SUPPORT 137

PRACTICAL LEGAL ADVICE 137

LICENSE PLAYBOOKS 138

LICENSE COMPATIBILITY MATRIX 139

LICENSE CLASSIFICATION 141

SOFTWARE INTERACTION METHODS 143

CHECKLISTS 145

CONCLUSION 146





PREFACE

My involvement with open source compliance started early in my career as a software developer, and has been a part of my job directly or indirectly for two decades now. Throughout my journey working with open source software, it was difficult to find practical references on open source compliance. My interest grew in making my own experiences available so that others could possibly learn from them, and then publish their experiences, so that as an industry we can all strive towards better ways to achieve open source compliance while minimizing impact on engineering resources and product delivery timelines.
This handbook summarizes my experience driving open source compliance activities in the enterprise, and focuses on practical aspects of creating and maintaining an open source compliance program. Since most of my experience was focused in the embedded space (with C and C++ being the dominant programming languages), this emphasis comes across throughout this handbook.
I hope you find it useful in your day-to-day drive to achieve open source compliance. 




Foreword

Open source has expanded not only from an idealistic movement led by individuals around software and intellectual property but from one where organizations (e.g., governments, companies, and universities) realize that open source is a key part of their IT strategy and want to participate in its development. Early success in Linux and other open source technologies has spread to all areas of technology.

More traditional organizations are also taking notice; they are making open source software a priority and using the software for strategic advantage in their operations.
Use of open source in enterprise IT has doubled since 2010.

78% of surveyed companies run their businesses on open source.

64% currently participate in open source projects.

39% plan to launch their own open source projects.

North Bridge & Black Duck
“The 2015 Future of Open Source Survey”

“Open Source First: Simply put, any solution developed using taxpayer dollars should be in the taxpayer’s domain (open source). At GSA, we believe that all code we developed should be shared under an open license so others may benefit from it. In addition, we will give priority to using open source software as we design now solutions.”
Office of the CIO, U.S. General Services Administration (U.S. agency that oversees $66 billion of procurement annually)

 




“The development of Blockchain technology has the potential to redefine the operations and economics of the financial services industry. It emerges at an important time, as the industry strives to be leaner, more efficient, and more digital. Open source development will accelerate the innovation and help drive the scalability of this technology, and we are proud
to support the Hyperledger Project.”
Richard Lumb, Chief Executive, Financial Services, Accenture


“From increasing member investments to a growing, vibrant developer community, the Dronecode Project’s first year has been extremely exciting. By bringing efforts together to establish a common platform and utilizing open source best practices, we’re able to build the foundation for a new era of drone applications that extend from the camera to the cloud. The Dronecode ‘full-stack’ platform approach, combined with the hardware and software innovations of its members, will bring about a new generation of drones that are autonomous, aware of their environments, and continuously connected . an airborne Internet of Things.”
Chris Anderson, CEO, 3DR
(Former Editor in Chief of Wired magazine and author of “The Long Tail”)

“Open source is essential to our development process. It’s a powerful approach that lets people work together to build great solutions while realizing shared benefits.”
Rob Alexander, CIO, Capital One

Organizations are looking for guidance on how best to participate appropriately in open source communities and to do so in a legal and responsible way. Participants want to share their code and IP, and they need a trusted neutral home for IP assets (trademark, copyright, patents). They also need a framework to pool resources (financial, technical, etc.).





Participants need expertise to train them how to collaborate with their competitors in an effective manner. To that end, this book is geared to creating a shared understanding on the best ways to create shared value and innovation while adhering to the spirit and legal particulars of open source licensing. 
 
 
 




Chapter 1

INTRODUCTION TO OPEN SOURCE COMPLIANCE

変わりゆくビジネス環境
従来、プラットフォームやソフトウェアスタックはプロプラエタリなソフトウェアを使って実装され、内部開発されたソフトや交渉の結果であるライセンス条件によるサードパーティのソフトから成る様々なソフトウェアのブロックから構成されていた。ビジネス環境は予測可能で、企業は潜在的なリスクをソフトウェアベンダーとのライセンス交渉や契約交渉を通じて軽減していた。全てのソフトウェアコンポーネントについて誰が提供者であるかを知るのは大変容易であった。図１は従来のハードウェア、ソフトウェアのプラットフォームについて主なブロックを示したものである。

図1プロプラエタリなソフトウェアのブロックに依る従来のソフトウェアプラットフォームの単純化したアーキテクチャ





時と共に企業はOSSを自社のプラットフォームやソフトウェアスタックに組み込み、その恩恵に預かるようになってきた。その理由は製品ごとに様々であるが、様々な業界で共通するのは、オープンソースのコンポーネントには即座に使える卓越した特徴があったこと、分散的な開発による市場投入への時間短縮により経済的に有意の利益があったこと、そしてソースコードをカスタマイズするという新しく出来ることを提供したこと、である。その結果、複数のソースによる新たな開発モデルが登場した。その結果、複数のソースによる新たな開発モデルが登場した。

この新たなモデルでは、製品は下記の任意の組み合わせとなる。

. プロプラエタリなコード、その製品やサービスを作る企業が開発したものプロプラエタリなコード、元々はその企業によりオープンソースのライセンス下でオープンソースのコンポーネントを統合したり適用したりすることで開発されたが、上流のオープンソースプロジェクトに寄付されず戻されなかったものサードパーティの商用コード、サードパーティのソフトウェアプロバイダにより開発され、製品やサービスを作る企業が商用ライセンスの下で受領したものオープンソースのコード、オープンソースのコミュニティにより開発され、製品やサービスを作る企業がオープンソースライセンスの下で受領したもの


図２（次ページ）に複数のソースによる開発モデル、および入ってくるソースコードの様々な組み合わせを示す。

この開発モデルでは、ソフトウェアコンポーネントは任意の数の出所から来た、様々なライセンス下でライセンスされたソースコードから構成され得る。たとえば、ソフトウェアコンポーネントAはサードパーティのプロプラエタリのコードに加えプロプラエタリなコードも含んでおり、ソフトウェアコンポーネントBはオープンソースプロジェクトからのソースコードに加えプロプラエタリなコードを含む、である。







図 2 マルチソース開発モデル

かつては明らかにプロプラエタリなソフトウェアスタックだったものの中にオープンソースのソフトウェアのコンポーネントが増えていくに従い、ビジネス環境は慣れ親しんだ領域、企業が好む環境から離れていく。
図３（次ページ）はあるプラットフォームやソフトウェアスタックにおいて、様々な階層でオープンソースソフトウェアを受けいれる様子を示したものである。

プロプラエタリな開発モデルと、マルチソースによる開発モデルとの大きな違いの一つは、オープンソースソフトウェアのライセンスは交渉するものではないことである。ソフトウェアの提供者（すなわちオープンソースの開発者やプロジェクト）と調印する契約はない。そうではなく、オープンソースプロジェクトを開始した人々が所定のライセンスを選ぶ。そしてプロジェクトがある規模に達すると、変更は事実上不可能となる。マルチソースの開発モデルを使うとは、数十の相異なるライセンス（とライセンスの組み合わせ）に基づく数百人、時には数千人のライセンス提供者やコントリビューター（著作権者）と関わること、を企業は理解しなければならない。その結果、かつては企業対企業のライセンスや合意に至る交渉を通じて管理されていたリスクは、強固なコンプライアンスプログラムと、注意深いエンジニアリングの実施によって管理されることになる。



Figure 3. A simplified view of the architecture of a modern software platform, showing the proliferation of open source inside each of the software building blocks.

オープンソースコンプライアンス手始め
オープンソースのイニシアチブやプロジェクトを使う事で、企業や組織はオープンソースソフトウェアの開発者を代表する数百、時に数千のコミュニティと協力し、イノベーションを加速できるようになる。しかしながら、オープンソースのコミュニティと組むには責任が伴う。オープンソースのライセンスに伴う義務を順守することを保証しなければならない。
オープンソースのコンプライアンスとは、オープンソースのユーザー、インテグレーター、開発者が著作権表示をきちんと見て、自らに関わるオープンソースのソフトウェアコンポーネントのライセンス上の義務を満たすプロセスである。適切に規定されたオープンソースのコンプライアンスのプロセスは、ライセンス条項の順守を保証すると同時に、企業自身、あるいはサードパーティのサプライヤの知的財産が意図せず公開されたり、その他不適当な結果を招いたりしないように設計されるべきである。
オープンソースのコンプライアンスは4つ[01]の主要な目的の達成に役立つ。

. ライセンス上の義務に従う
. オープンソースが商用製品で効果的に使われることを助ける. サードパーティとの契約上の義務に従う 

オープンソースのコンプライアンスを保証する利点

オープンソースのコンプライアンスを達成する事にはいくつかの利点がある。確固たるコンプライアンスプログラムを持つ企業は技術的にも利益を得ることが多い。規定に従っているソフトウェア群の資産はサービスし、試験し、アップグレードし、保守することが容易だからである。更に、コンプライアンスの活動は、様々な製品や部門で使われていてカギとなる、組織にとって高度に戦略的で利益をもたらすオープンソースソフトウェアの洗い出しにつながる。また逆に、レビューを繰り返すことを通じてコンプライアンスは、オープンソースのコンポーネントの利用に伴うコストやリスクを示すことにもなる。

健全なコンプライアンスのプログラムは外部コミュニティと協業する上でも大いに有用である。コンプライアンス上の問題が生じた時、そうしたプログラムは会社が善意であることを示すことができる。

最後に、頻度は下がるが強固なコンプライアンスのプログラムがもたらす利益として、例えば、会社の買収や売却、新製品や新サービスのリリースのためより良い準備となる、が挙げられる。オープンソースへのコンプライアンスの保証はそうした業務が完了する前に終了させることが必須だからである。更には、OEMや下流のベンダーとの取引においてコンプライアンスが検証できることは付加的な優位となる。






コンプライアンスの失敗

ソフトウェア開発の全工程において、コンプライアンスプログラム上のエラーや不十分さはコンプライアンス上の失敗に繋がることがある。下記はこうした失敗の例である。

. 不適切な帰属表示 (attribution notice)帰属表示は通常、テキストファイルとしてオープンソースのコンポーネントと共に提供され、オープンソースコンポーネントへのコントリビューターが提供したことを示す。
. ライセンス表示提供を怠るライセンス表示とは、製品やスタックに含まれるオープンソースのライセンス文書を含んだファイルで、多くの場合、製品の文書と共に、あるいは製品やアプリケーションのUIと共に提供される。
. 著作権表示の省略著作権表示は、ソフトウェアのコピーにつけられる識別情報で、著作権者を示す。
. 変更表示の付け忘れ変更表示とは、ソースコードに対する変更をチェンジログ内で表示する、GPLやLGPLで必要になるものである。一例を下記に示す。


/* * Date Author Comment * 10/15/2015 Ibrahim Haddad Fixed memory leak in nextlst() */

. 不十分な、あるいは誤解を招く主張
. ソースコード提供の失敗ソースコードを利用可能とすること（変更を含む）はGPL/LGPLライセンスファミリーの要求の一つである。 





. GPL/LGPL等のライセンスのソースコードを使う際に書面で告知[02]しない書面での告知は、その製品のエンドユーザーに対してその製品に含まれるオープンソースソフトウェアの情報、そして頒布されるべきソースコードをダウンロードする方法を開示する。It is usually provided as part of the product documentation and also accessible from the product’s user interface. 書面告知の基本的な例は下記のようになる。


Foobarの本製品の中で使われているソフトウェアに関連する、FooBar社が公開しているソースコードのコピーを得るには、http://opensource.foobar.com にアクセスするか、opensource@foobar.com にメールでリクエストを送るか、またはリクエストを通常の郵便で

Foobar株式会社

オープンソースプログラム室

住所、郵便番号

City, State, Postal Code

国名

. ビルド用スクリプトを提供しない　コンパイルに必要なもの（GPLやLGPLファミリのライセンス毎に）。



知的財産権上の失敗

表1 (次ページ) はソフトウェア開発の過程においてプロプラエタリな知財とオープンソースの知財を誤って混ぜてしまい、ライセンスコンプライアンス問題となるありがちな例を示したものである。もっともありがちなのは、異なる、または両立しないライセンス（例：プロプラエタリ、サードパーティやオープンソース）下のソースコードを混ぜてしまう、である。そうして混ぜてしまうと企業はプロプラエタリなソースコードをオープンソースライセンスで開示することを強制され、（おそらくは）高い価値を持つ知財の制御を失い、市場における差別化が弱くなってしまう。





知財上の失敗は下記を招く。
. 差し止め命令によりコンプライアンス上の懸念が解決されるまで製品が出荷できない問題のバイナリコードに関わるプロプラエタリなソースコードを（ケースに応じた）オープンソースライセンスで配布するよう要求されるコンプライアンス上の懸念を解消するため多大な工数が費やされる顧客、ディストリビュータ、サードパーティのソフトウェア供給者、そしてオープンソースコミュニティを困惑させる


表１知財上の失敗の例
問題の類型

発見する方法

回避方法


オープンソースのコードをサードパーティのコードに挿入

開発プロセスの中で開発者がオープンソースのコード (いわゆるスニペット) をプロプラエタリやサードパーティのコードに挿入して発生


オープンソースのコードとの一致の可能性を求めてソースコードをスキャン

 
コンプライアンスやオープンソースライセンス、プロプラエタリやサードパーティのコードにオープンソースのコードを含めることの意味について認識するためのトレーニングを提供

予期されないライセンスやコードのスニペットのため、定期的にプロジェクトの全ソースコードをスキャン
オープンソースソフトウェアを使う際には製品のレポジトリにコミットする前に承認を必要とするようにする 








問題の類型

発見する方法

回避方法

オープンソースのソフトウェアをプロプラエタリなソースコードのソフトウェアにリンク (またはその逆。C/C++特有の問題) specific to C/
C++ source code)
衝突(conflict)する、または互換性のない(incompatible)[03] ライセンスのソフトウェアコンポーネントをリンクした結果発生

異なるソフトウェアコンポーネント間のリンクを検出できる依存性追跡ツールを利用; 企業のオープンソースポリシーで許容されているかを識別[04]

企業のコンプライアンスポリシーに基づくリンクのシナリオについての訓練を提供
定期的に依存性追跡ツールを動作させ、全てのリンク関係を検証; 企業のポリシーで許容されていないあらゆる事柄にフラグを立てる

オープンソースのコンポーネントにプロプラエタリなコードを含める
開発者がプロプラエタリなソースコードをオープンソースソフトウェアにコピー/ペーストして発生

ソースコードをスキャンする。ツールでオープンソースのコンポーネント由来ではないソースコードは識別できるので、監査のため各種のフラグをつける
スタッフを訓練

ソースコードを定期的に検査

プロプラエタリなソースコードをオープンソースのコンポーネントに含めるには承認を必要とするようにする 




ライセンスコンプライアンス問題

ライセンスコンプライアンス問題は知財上の問題に比べ一般に損害は小さい。自社のプロプラエタリなコードをオープンソースライセンスで開示するといった副作用がないからである。

ライセンスコンプライアンス上の失敗は下記のいずれか（か、その組み合わせ）を招き得る。
. ソースコードが開示されるまで製品出荷を差し止める命令






. バージョンのミスマッチによりカスタマーサポート・カスタマーサービス上の問題となる（サポートホットラインに電話やemailでソースコード開示について問い合わせがくる結果）
. 顧客やオープンソースコミュニティにおいて困惑や悪い評判を招く


表２にソフトウェア開発プロセスでの最も一般的なライセンスコンプライアンス問題の例、および回避方法を示す。

表2Examples of license compliance problems and how to avoid them
問題の類型

回避方法

ライセンス上の義務の一環としてソースコードのパッケージを出版[05] (publish)したり利用可能としたりし損ねる

詳細なコンプライアンスチェックリストに従い、製品やアプリケーション、ソフトウェアスタックの出荷時には全てのコンプライアンス上のアクションアイテムが完了したことを確認

出荷されたバイナリと異なるバージョンのソースコードを提供

検証作業をコンプライアンスプロセスに追加し、提供するソースコードのバージョンが、出荷される バイナリのバージョンと確かに正確に対応することを確認

出荷製品に組み込まれたオープンソースソフトウェアへの変更をリリース忘れ

部品表 (bill of material, BOM) 差分検出ツールを使いリリース毎のソフトウェアコンポーネント変更を特定
コンプライアンスプロセスにおいて、より新しいバージョンのソフトウェアコンポーネントを再導入
「diffの計算」を変更された(オープンソースとするにふさわしい) ソースコードのチェックリストに加え 、製品に使われたオープンソースのリリース前に行う 








問題の類型

回避方法

変更されたオープンソースのコードにマークを付け忘れる、変更の記述を入れ忘れる

ソースコードへのマーク付けをソースコードのリリース前のチェックリストに加え、ダウンロードしたオリジナルのコピーとの差分すべてに確実にマーク

ソースコードのリリース前に検査 
変更されたソースコードが適切にマークされていることを、コンプライアンスプロセス上のマイルストーンとする

ソースコードの変更履歴をアップデートすることを、開発プロセスの一部とするようスタッフを教育





コンプライアンスプロセス上の失敗

コンプライアンスプロセス上の失敗は、オープンソースのライセンス条件の侵害、例えばライセンス上の義務を満たさない、に繋がる。表３にソフトウェア開発で起きる最も一般的なコンプライアンスプロセス上の失敗のリスト 、および回避方法を示す。 




表3Sample process compliance failures
失敗

回避方法

開発者が企業内のオープンソース委員会 (時にオープンソース評価委員会と呼ばれる) オープンソースソフトウェアの利用申請をしない、期限までに行わない

コンプライアンスポリシーとプロセスについての教育

Conduct periodic full scans of software platform to detect any OS not corresponding to a given approval form. 定期的にソフトウェアプラットフォーム の全スキャンを行い、承認された型に該当しないオープンソースを検出。もしビルドされたシステムに該当するコンプライアンスチケットがないオープンソースコンポーネントが検出されたら、自動で新チケットを発行（企業がBugzillaのようなツールに埋め込まれているワークフローを使ってソフトウェアコンポーネントを追跡していると仮定）

業績評価にコンプライアンスを含める。例えばコンプライアンスポリシーに従わなかったらボーナス査定に直結
開発者がオープンソースの利用申請を早期に、オープンソースのコード の利用を決める前でも行うよう命令

オープンソースの訓練を受けない

オープンソースの訓練は従業員のキャリア開発計画の一部であり、業績評価プロセスの一部としてモニタされていることを念押し

ソースコードの監査を行わない

コンプライアンスのスタッフを適切に訓練

ソースコードを定期的にスキャン
繰り返される開発プロセスのマイルストーンに監査を確かに入れ込む
適切なレベルのスタッフを揃え、監査がスケジュール遅れとならないようにする

監査で発見された問題を解決しない

監査レポートが完結しない限りコンプライアンスチケットをクローズ させない。チケットのクローズは、関連するサブのタスクが存在しない時のみとする









得た教訓
この数年で明るみに出たコンプライアンス違反が数件あった。そうしたコンプライアンス違反の法的な決着を通じて、オープンソースのプロフェッショナル達は次のような教訓を学びつつある。lessons that we will explore in following subsections.

製品出荷やサービス立ち上げに先立ちコンプライアンスを確実に行う

コンプライアンス違反事件の最も重要な教訓は、関係した企業は最終的には問題のライセンス条項に従わなければならなかった、であり、この事実を踏まえた問題解決のコストは基本的なコンプライアンスのコストを圧倒的に上回っていた、である。従って、製品出荷やサービス立ち上げに先立ってコンプライアンスを確実に行うのが賢いやり方である。
コンプライアンスは法務部門の業務に留まるものではない、と認識することは重要である。全部門が関わって適切なコンプライアンス、正しいオープンソースの利用、必要に応じた再配布、を確実に行う必要がある。この関わりには首尾一貫したコンプライアンスポリシーや手続きの確立と維持管理、利用中（プロプラエタリ、サードパーティ、オープンソース）の全ソフトウェアコンポーネントのライセンスが共存し得ることを製品出荷やサービス立ち上げ前に確認すること、が含まれる。そのためには企業はオープンソースを管理するインフラを末端まで構築し下記を行う必要がある。

. 製品の中で、サービスが開示している、あるいは内部で利用されている全てのオープンソースを識別アーキテクチャを評価し、オープンソースのライセンス上の義務がプロプラエタリやサードパーティのソフトウェアコンポーネントまで拡大していないか、拡大しているならばどのように、を検証適用可能なオープンソースライセンスを収集し、法務部門が評価






. オープンソースの利用および配布のポリシーと手続きを定めるアーキテクチャ設計と製造の実務においてリスクを低減


コンプライアンス違反は高くつく

コンプライアンス違反が公となった事件の多くはGPLのソースコードが関わっている。これらの紛争解決の合意では下記の一つないし一つ以上 の条項が含まれている。

. コンプライアンスを満たすよう必要なアクションを取る
. コンプライアンスオフィサーを置きコンプライアンスをモニタし確認させる
. 製品を受け取った過去の顧客に、製品はオープンソースソフトウェアを含んでいること、そのソフトウェアについての権利、を通知
. ライセンス告知を企業のウェブサイトに掲載
. 製品説明に告知を追加
. ソースコードをすべての改変と共に利用可能 に（GPL/LGPLファミリのライセンスに限る）
. 問題となっているオープンソースソフトウェアのバイナリの配布を、関連のソースコードが開示されるまで、あるいはコンプライアンス違反で影響を受けた特定顧客が利用可能となるまで差し止め. いくつかの事件では、原告に対し非開示の額の金銭的対価






更に、コンプライアンス異議申し立てを受け、それが成功すると下記のコストを負うこととなる。

. コンプライアンスの照会への対応として申し立てに応じた調査、問題のソースコードのデューデリジェンス、のためのディスカバリとデューデリジェンスのコスト
. 外部・内部のリーガルコストブランドや評判、信頼性へのダメージ


ほぼすべての事件において、オープンソースライセンス上の義務違反は面目の失墜、否定的な記事、オープンソースコミュニティとの関係悪化を招いている。
関係は大事

オープンソースソフトウェアを自社製品で利用する企業は、利用しているコードを開発し維持七得るオープンソースコミュニティと良い関係を持ち、維持することが望ましい。オープンソースプロジェクトのコミュニティは企業が自社製品に含まれるオープンソースソフトウェアのライセンスを尊重すると期待している。その方向に動き、オープンかつ正直な関係を気づくことは大いに価値がある。
訓練は重要
訓練はコンプライアンスプログラムにおいて必須の構成要素であり、オープンソースソフトウェアの利用を律するポリシーを従業員がよく理解する礎となる。ソフトウェアに関わる全職員が企業のポリシーとプロセスを理解する必要がある。企業はそうした教育を公式・非公式の教育で提供することが多い。





第2章

オープンソース管理プログラムの確立

オープンソース管理プログラムはオープンソースソフトウェアの全ての側面、その選択、承認、利用、配布、監査、インベントリ、訓練、コミュニティとの関わり、広報等々の体系を定める。本賞はオープンソース管理プログラムの様々な構成要素を概観し、新しいコンプライアンスプログラム策定における難しさを概説し、そうした難しさを克服する方法を述べる。
オープンソースコンプライアンスプログラム

最初に、成功するオープンソースコンプライアンスプログラムでコアとなる構成要素を概観する。本章と図4にこれら構成要素の概観を示す 。 


図4オープンソース 管理プログラムの必須構成要素








コンプライアンス戦略

オープンソースコンプライアンス戦略は、ポリシーやプロセスの実装 の主たる側面について、ビジネスに立脚してコンセンサスを推し進めるものである。こうしたハイレベルなコンセンサスに基づかずにポリシーやプロセス の実装の細部について社内合意しようとすると、不可能とは言わないまでも非常な困難に直面する。コンプライアンス戦略はコンプライアンスを確保するために行うべきことを定め、職員のオープンソースソフトウェアの扱いを統べる原則を与える。オープンソースの承認、取得 (acquisition) , 利用、オープンソースライセンスを含むかオープンソースラインセンスに基づいてライセンスされたソフトウェアをリリースする方法、の正式なプロセスも本戦略に含まれる。
照会応答戦略

照会応答戦略は、コンプライアンスが問われた時に行うべきことを定める。企業は時として悪評（場合によっては正式な申し立て）を、コンプライアンスについての追加情報提供の要請を無視したり、コンプライアンスの照会を扱う方法を知らなかったり、オープンソースコンプライアンスプログラムが欠落していたり不十分だったり、単に照会者と協力しなかったために、受けてきた。こうしたアプローチは関係者のだれにとっても実りや利益を生まない。従って企業は照会を受けとり、受領したことを応答し、照会者に検討することを伝え、現実的なフォローアップの日程を通知する方法を定めるべきである。後ろの章で、オープンソースコンプライアンスに対する照会を扱うシンプルなプロセスについて述べる。
ポリシーとプロセス

オープンソースコンプライアンスポリシーとは、オープンソースソフトウェアの管理（利用と寄付の双方）を取り仕切るルール群である。プロセスとは、日々の業務にこれらルール群を実装するかを詳細に列挙したものである。コンプライアンスポリシーとプロセスがオープンソースソフトウェアの様々な側面、利用、寄付、監査、配布を取り仕切る。図５（次ページ）はコンプライアンスプロセスの例を図示したもので、個々のソフトウェアコンポーネントがデューデリジェンスの一環として通るべき様々なステップを示している。このプロセスの詳細は後ろの章で述べる。

 
図5コンプライアンスデューデリジェンスプロセスの例

コンプライアンスチーム

オープンソースコンプライアンスチームとは、オープンソースコンプライアンスを確実に行うため様々な分野の人々を集めたチームである。コアとなるのはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることが多い委員会で、エンジニアリング、製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成される。拡大チームは様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれる。ただし拡大チームのメンバはコアチームと違い、OSRBから仕事を委任された時だけ活動する。コンプライアンスに常時携わるわけではない。第３章ではオープンソースコンプライアンスを達成するための個々の人間の役割と責任について詳述する。

図６（次ページ）はコンプライアンス達成のためのこれら二つ、コアチームと拡大チーム、を図示している。







図6オープンソースコンプライアンスを確かなものとする個人とチーム

ツール

オープンソースコンプライアンスチームはツールを使うことでソースコードの監査、オープンソースコードとそのライセンスの発見、が自動化され楽になる。こうしたツールには

. コンプライアンスプロジェクト管理ツール、コンプライアンスプロジェクトを管理し、タスクやリソースを追跡
. ソフトウェアインベントリツール、個々のソフトウェアコンポーネント、バージョン、それを使用している製品、関連情報を継続的に追跡






. ソースコードとライセンスの識別ツール、ビルドするシステムに含まれるソースコードの由来とライセンスを特定. リンク解析ツール、問題となるC/C++ソフトウェアコンポーネントと、製品に含まれる他のソフトウェアコンポーネントとの関係を特定。本ツールを使うことで、企業のポリシーを満たさないソースコードパッケージとのリンクを発見できる。この目標は、プロプラエタリやサードパーティのソフトウェアコンポーネントにオープンソース上の義務が何ら及んでいないことの確定である。もしリンクが発見されたら、製造部門に対しバグチケットを発行し、問題と解決方法を記述する。. ソースコードのピアレビュー（査読）ツール、ライセンス上の義務を満たすための開示に先立ちオリジナルソースコードに対する変更をレビュー。
. 部品表 (bill of material, BOM) 差分ツール、二つの異なるビルドでの部品表の違いを特定。本ツールはコンプライアンス準拠作業を積み上げで行う場合に非常に有用である。 

ウェブ上のプレゼンス

企業はポータルを２方向で使う。：一つは内向きに、企業内へ。もう一つは外向きに、社会とオープンソースコミュニティへの窓として。内部向けのポータルはコンプライアンスポリシー、ガイドライン、各種文書、訓練、通知、メーリングリストへのアクセスを提供する。外部向けのポータルは社会とオープンソースコミュニティに向けて公開のプラットフォームとなり、またオープンソースのパッケージのソースコードや受領通知ほかの情報開示を投稿する場としてライセンス上の義務を履行する。 




教育

教育はコンプライアンスプログラムにおいて必須の構成要素で、オープンソースソフトウェアの利用を取り仕切るポリシーを従業員がよく理解する基礎となる。オープンソースとコンプライアンスの教育の目標は、公式非公式を問わず、オープンソースのポリシーや戦略、オープンソースのライセンスや、製品やソフトウェアポートフォリオにオープンソースソフトウェアに組み入れることのビジネス的、法的リスクについて共通理解を作り上げ、注意喚起することである。またトレーニング は、企業内でコンプライアンスポリシーを広め推進し実施し、コンプライアンスの文化を育てる場となる。

公式トレーニング

企業の規模やオープンソースの営利活動への浸透度合いに応じて、企業はオープンソースに携わる従業員に公式の講師によるトレーニングコースを命じ得る。実例でのトレーニングがその頂点となり得る。
非公式トレーニング

非公式のトレーニングは下記のいずれか、あるいは全部を含む。

. ブラウンバッグセミナー（茶色鞄のセミナー）：ブラウンバッグセミナーとは一般に、昼食時に従業員や招待者が行うプレゼンテーションである。こうしたセミナーの目標は、商用の製品や企業のソフトウェアポートフォリオの中にオープンソースを組み込むことの様々な側面について講演し、議論を起こすことである。これらのセッションは、企業のコンプライアンス プログラム、ポリシー、そしてプロセスに関する議論も含みます。. 新人研修：時にはコンプライアンスオフィサーが企業のコンプライアンスの努力、規則、ポリシー、プロセスを新人に対して研修の一部として講演し、必要となるオープンソースの管理上の情報（聞くべき人、訪れるべき内部のウェブサイト、オープンソースとコンプライアンスのトレーニングへの参加方法等々）を提供する。






自動化
オープンソースソフトウェアを使いたい、寄付したい開発者はオンラインで申請し、適切な承認を得る必要がある。これは自動化されたオンラインシステム、通常はオープンソースコンプライアンスの管理を特に組み込んだワークフローに従うバグ追跡システムで行うのがベストである。

メッセージの発信

メッセージの発信は内部向け、外部向けともコンプライアンスプログラムの必須の構成要素である。ここで最も重要なのは明確で首尾一貫していることで、内部的に従業員に対してオープンソース関連の会社の目標や懸念事項を伝える場合も、外部に向け自社製品やソフトウェアスタックが利用しているオープンソースプロジェクトの開発者コミュニティに伝える場合も同様である。
コンプライアンスの難しさと解決策

企業でのコンプライアンスプログラムの確立では、ほぼ確実に困難に直面する。以下の説では最もありふれた困難を取り上げ、克服する方法を示唆する。

コンプライアンスプログラムの作成
最初の難しさは、コンプライアンスプログラムやそれを支える（既存の）内部手続きのためのインフラと、製品出荷やサービス開始の〆切とのバランスを取ることである。こうした難しさを和らげ解決し、開発活動にとって重荷とは見做されない能率的なプログラム確立を助ける様々な手段がある。





解決策

役員のサポート

役員レベルでのオープンソース管理プログラムへのコミットは、その成功と継続のために重要である。
ポリシーとプロセスの負荷の軽さ

プロセスとポリシー は重要である。だが開発プロセスにとって重荷に過ぎると開発チームが見做さないよう軽く効果的でなければならない。
能率的なオープンソース管理は二つの基盤の上に成り立つ。：簡単で明確なコンプライアンスポリシーと、軽いコンプライアンスプロセスである。

基本ルールを強制

コンプライアンスプログラムを実施する一環として、誰でも従わねばならない幾つかのシンプルな規則を定める必要がある。

. 開発者がオープンソースソフトウェアを製品やソフトウェアスタックに組み入れを計画するときは申請する
. サードパーティのソフトウェアサプライヤに、提供物に含まれるオープンソースソフトウェアの情報を開示させる。あなたのサプライヤがオープンソースコンプライアンスを見事に実践しているとは限らない。オープンソースの開示に関わる文言を入れるよう、契約を見直すべきである。. アーキテクチャのレビューとコードの検査を指示し、オープンソース評価委員会 (OSRB) がソフトウェアコンポーネント間の関係を理解し、オープンソースからプロプラエタリなソフトウェアへとライセンス上の義務が派生していることを見つけられるようにする。大規模に行うには適切なツールが必要となる。 





. サードパーティのソフトウェアプロバイダから受領するすべてのソフトウェアをスキャンし、オープンソースに関する開示が正しく、完全であることを確認する 

コンプライアンスを開発プロセスに統合

コンプライアンス確立の最善の方法は、コンプライアンスプロセスやポリシー、チェックポイント、活動を既存のソフトウェア開発プロセスに組み込むことである。
長期的な目標と短期的な実行
図4はコンプライアンスプログラムの成功に必須の構成要素を示している。プログラムのすべてを実装するのに必要な作業の多さに圧倒される関係者もいるだろう。実際にはそこまで難しいものではない。すべての要素を同時に実装しなければならない訳ではないからである。すべての組織において優先されるのは、製品やサービスを期限通りに出荷し、と同時に内部的なオープンソースコンプライアンスのインフラストラクチャー を構築し拡大することである。従って、企業なりのコンプライアンスのインフラストラクチャーを状況の進展に合わせて構築すべきと考えればよく、その際には将来の活動や製品をふまえ拡張性を考えるべきである。カギとなるのは思慮深く現実的な計画である。

解決策

. 長期的な目標に合致する、十全なコンプライアンスのインフラストラクチャーを計画し、短期的な実行の必要性に合わせ、要素を一つずつ実装する。たとえば、もしオープンソースを含む製品開発やサービス提供を始めたばかりであり、すでに動いているコンプライアンスのインフラストラクチャーが何もないならば、最も差し迫った懸念はコンプライアンスチームを作ることであり、プロセスとポリシー、ツールと自動化を確立することであり、従業員を訓練することである。これらの活動を（この順番で）開始し、システム構築を（コンプライアンスの観点から）適切に制御しつつ開始したならば、プログラムの他の要素に進むことができる。
. ポリシーとプロセスを確立
. 開発プロセスの一部としてコンプライアンスを組み込み 





コンプライアンスについての対話

コンプライアンス活動の成功を確かなものとするには、対話は必須である。2種類の対話、あなたの組織内での内部的なもの、あなたの製品で使われているオープンソースのプロジェクトの開発者コミュニティとの外部に向けたもの、を考えることが重要である。
内部的な対話

企業はコンプライアンスについての対話が内部的に必要となる。オープンソースを商業ソフトウェアのポートフォリオへの組み入れが何をもたらすのか従業員が理解していることを確実にするためであり、企業のコンプライアンスポリシー、プロセス、ガイドラインについて教育を受けていることを確かなものとするためである。内部的な対話は下記のいずれでもよい。

. オープンソースコンプライアンス活動を幹部がサポート する電子メールでの対話オープンソースソフトウェア関連業務に携わる全従業員に対する正式な訓練命令オープンソースとコンプライアンスについてのブラウンバッグセミナーによりコンプライアンスについて更に注意喚起し、活発な議論を奨励内部的なポータルを作り、企業のコンプライアンスポリシーやプロセス、オープンソースに関係した出版物やプレゼンテーション、メーリングリスト、オープンソースとコンプライアンスに関係する討論フォーラムをホスト企業全体に向けたオープンソースのニュースレター。一般に隔月か四半期ごとに、オープンソースのコンプライアンスについて注意喚起 

外部との対話

企業は外部とのコンプライアンスについての対話が必要となる。自社が製品で使うオープンソースソフトウェアについてライセンス上の義務を果たす努力をしていることを、オープンソースのコミュニティに確かに認識させるためである。 




外部との対話は下記のいずれでもよい。

. コンプライアンス遵守のためにオープンソースを配布するためのウェブサイト. オープンソースの組織への参加 やサポート。こうした活動は企業がオープンソースの組織との関係を確立し、そうした組織の役割を理解し、有意義な貢献をするのを助ける。オープンソースのイベントや会議への参加。参加には様々なレベルがある。イベントのスポンサーから講演や出版物への寄与、あるいは単に開発者を参加させオープンソースの開発者たちと知り合いオープンソースコミュニティのメンバと新たな関係を育成する。


クリーンなソフトウェア起点 の確立

コンプライアンスプログラムの開始当初の困難の一つは、使われているオープンソースソフトウェアとそのライセンスを正確に把握することである。この初期の監査プロセスは、製品やソフトウェアポートフォリオのクリーンなソフトウェア起点の確立、と呼ばれることが多い。これは数か月かかることもある重い活動で、開発と並行してどの程度早期に作業を開始するかに掛かっている。
解決策

組織は初期のコンプライアンスを以下の活動を通じて達成する。

. オープンソースの利用申請の早めの提出と評価
. 自動化されたソースコードのスキャン を継続的に、事前設定した時間間隔で全ソースコードに対して 実行
. ソースコードのベースを継続的にスキャン。これにはサードパーティのソフトウェアプロバイダから受領したものを含める。該当するコンプライアンスチケットなしにコードベースにチェックインしたソースコードを捕まえるためである。こうしたソースコードのスキャンはたとえば毎月行う。. 設計とアーキテクチャの評価をソースコードの検査に加えて強制する。これはオープンソース、プロプラエタリ、そしてサードパーティのソフトウェアコンポーネントのコードの関係を解析するためである。これを強制するのは、そうした関係がライセンス上のコンプライアンスの義務に関わるときのみでよい。 

もし企業がコンプライアンスの起点構築に失敗すると、その製品の将来の改訂版（またはおなじ起点を使った異なる製品）がコンプライアンス問題で苦しむことはほぼ確定となる。
そうしたシナリオを防ぐため、企業は下記を考慮すべきである。

. シンプルだが確実に行われるポリシーと軽量なプロセスを提供
. コンプライアンス上のチェックポイントをソフトウェアの開発プロセスに含め、コンセプトが出荷される製品やソフトウェアスタックとなる時に行う。理想的にはすべての開発上のマイルストーンにおいて対応するコンプライアンス上のマイルストーンを組み込み、ビルドに使われる全ソフトウェアコンポーネントが対応する、承認されたコンプライアンスチケットを確実に持つようにする。
. 専任のコンプライアンスチームを確保する。この点は後ろの章で文章を割く。
. コンプライアンスチケットを効率的に処理するためツールや自動化を利用する。この点は後ろの章で論じる。


コンプライアンスの維持

オープンソースのコンプライアンスを維持するには、コンプライアンスの起点確立と同様、いくつかの困難がある。実際には踏むべきステップの多くは同じで、ただし規模は小さく、積み増しとなる。コンプライアンスの維持は継続的な努力であり、規律、そして既存の製造およびビジネスのプロセスへのコンプライアンス活動組み込みのコミットメントによる。
図7に積み上げのコンプライアンスの概念を示す。ここでは初期のコンプライアンスの起点と現在のバージョンとの間で起きたソースコードの変更が何であれ、コンプライアンスを確実に満たすことが必要となる。



図7積み上げのコンプライアンスの例

解決策

企業は以下の活動を通じてコンプライアンスを維持し得る。

. 企業のコンプライアンスポリシーとプロセス、加えてあらゆるガイドラインの厳守コードベースに統合されたすべてのソースコードについて、出所を問わず継続的に監査コンプライアンスや自動化に使われるツールを継続的に改善し、コンプライアンスプログラムにおいて可能な限り多くのプロセスを高い効率で実行


内面化と末永い実行 

オープンソースのコンプライアンス活動を維持するのは組織 が成長し、オープンソースを使った更なる製品やサービス出荷に伴う進行中の挑戦である。企業は開発のカルチャーの中へとコンプライアンスを内面化し、末永く実行するためにいくつかの段階を踏むとよい。 




解決策

後援者

役員レベルのコミットメントがコンプライアンス活動を持続させる上で必須である。進行中のコンプライアンスのリーダーとなり、オープンソースの管理機能を企業としてサポートする役員がいなければならない。
一貫性

企業全体で一貫性を保つことは複数のビジネスユニットや子会社を持つ大企業では重要である。部門間での一貫したアプローチは、記録の保持、グループ間でのコードの共有促進と並び有用である。

計測と分析

コンプライアンス活動やプロセス、手続きのインパクトや効率性を計測し分析すべきである。パフォーマンスを調べ、コンプライアンスプログラムを改善するためである。計測の尺度は、コンプライアンスプログラムを推進する場合にプログラムの個々の構成要素から得られる生産性向上について対話をする助けとなる。
コンプライアンスプロセスの改善

組織がオープンソースを利用する範囲や目的 は変化する。製品や技術、企業の吸収や合併、海外への委託、その他多くの要因によって動く。従って、今ぷらインすポリシーとプロセスを絶えず評価し、改善する必要がある。
更に、オープンソースラインセンスの解釈や法的リスクも進化する。こうしたダイナミックな環境の中で、コンプライアンスプログラムも進化する必要がある。 




守らせること 

コンプライアンスプログラムは、守られなければ無意味である。効果を持たせるため、コンプライアンスプログラムにはプログラム厳守を監視し、ポリシーやプロセスやガイドラインを全社的に守らせる メカニズムを含めるべきである。コンプライアンスプログラムを守らせる方法の一つは、ソフトウェア開発プロセスと統合し、従業員の業績査定の幾分かをコンプライアンスプログラム活動へのコミットメントと実行とすることである。

スタッフ割り当て
スタッフがコンプライアンスの職務のために割り当てられ、十分なコンプライアンスの訓練が組織の全従業員に確実に施されていなければならない。大きな組織ではコンプライアンスオフィサー、および関連する職務はフルタイムの仕事となり得る。小さい組織では分担したり、時間の一部を割くべき活動となる可能性が高い。





第3章

コンプライアンス達成に向けて：役割と責任

一人の個人では、どれほどの達人であろうとも、オープンソースコンプライアンスを組織全体に実装することはできない。図8はオープンソースコンプライアンスの達成に責任がある様々な部門を書き下したものである。コンプライアンス達成には二つのチームが必要となる。コアチームと拡大チームである。後者は通常、前者を包括するものとなる。



図8オープンソースコンプライアンスを確かなものとする個人とチーム





コアチームはオープンソース評価委員会 (Open Source Review Board, OSRB) と呼ばれることも多い。エンジニアリングと製品のチームの代表者たち、一人以上の法務顧問、そしてコンプライアンスオフィサーから構成される。表４に個々の参加者のコアチームにおける役割と責任を示す。

拡大チームは表5 (49ページ) に示す通り、様々な部門からコンプライアンス活動のため随時加わる人々で、文書作成、サプライチェーン、全社開発 、IT、ローカル化、オープンソース幹部会議 (Open Source Executive Committee, OSEC)らが含まれる。ただし拡大チームのメンバは（実体をもつ組織である）コアチームと違い、OSRBから仕事を委任された時だけ活動する。

表4コンプライアンスコアチーム (OSRB) の主な役割と責任

参加者
主な役割と責任

法務の代表者

代表者はその時の作業に応じ、法律顧問から弁護士補助職員まで変化する

OSRBとOSECへ参加

オープンソースソフトウェアの利用、改変、配布をレビューし承認

ライセンスについてのガイドラインの提供

トレーニングの提供と承認
オープンソースコンプライアンスプログラム改善への貢献

オープンソースのポータルの内容をレビューし承認
ライセンス上満たすべき義務一覧のレビューと承認
オープンソースに関する告知の承認









参加者
主な役割と責任

エンジニアリングおよび製品チームの代表

企業によってはエンジニアリングと製品のチームは分かれていない

OSRBとOSECへ参加

コンプライアンスポリシーとプロセスの遵守
コンプライアンスの実践を開発プロセスの中に統合

コンプライアンスプログラムの改善に貢献

技術的なコンプライアンスプログラムの遵守

あらゆる質問への迅速な回答

設計、アーキテクチャ、コードのレビューの実施
配布のためのソフトウェアパッケージ準備

コンプライアンスオフィサー

オープンソースコンプライアンスオフィサーは必ずしも専任である必要はない。大抵の場合、オープンソース部門の部長や所長が役割を果たす

全てのコンプライアンス活動を推進
ソースコードのスキャンと監査を調整
ソースコードパッケージの配布を調整

OSRBとOSECへ参加

コンプライアンスとオープンソースのトレーニングに寄与
コンプライアンスプログラムの改善に寄与

OSECにコンプライアンス活動について報告

自動化や、開発環境の中にオープンソースのコードを見つける新たなツール作成に寄与 








表5コンプライアンス拡大チームの役割と責任

参加者
主な役割と責任

オープンソースの戦略を決定するオープンソース幹部会議 (Open Source Executive Committee, OSEC) 

知財のリリース提案 をレビューし承認
プロプラエタリなコードをオープンソースライセンス下でリリースする提案をレビューし承認。これはそのソースコードはオープンソースにする前提で開発されたならば不要

文書作成
オープンソースライセンスの情報と告知を製品の文書の中に含める

ローカル化
製品やソフトウェアスタックに関わるオープンソースについて、基本的情報をターゲットとなる言語に翻訳

サプライチェーン
サードパーティプロバイダからライセンスされた、または購入したソフトウェアコンポーネントに含まれるオープンソースの情報の開示をサードパーティプロバイダに指示

オープンソースソフトウェアが含まれている、またはバンドルされているサードパーティのソフトウェアの納入を手助け

IT (情報技術)
コンプライアンスプログラムで利用されるツールと自動化のインフラをサポートし整備

OSRBの要請に応じ、新しいツールを作成、入手









参加者
主な役割と責任

Corporate Development 
Request open source compliance be completed before a merger or acquisition 
Request open source compliance be completed when receiving source code from outsourced development centers or third-party software vendors





オープンソース評価委員会 (Open Source Review Board, OSRB)

OSRBは下記に責任を持つ。
. サードパーティのソフトウェアとオープンソースのソフトウェアライセンスとが相互にコンプライアンスを確かに満たすようにする. オープンソースソフトウェアの効果的な利用、およびオープンソースソフトウェアへの寄与を促進
. プロプラエタリな知財（引いては製品の差異化）を、オープンソースのライセンスがプロプラエタリな、またはサードパーティのソフトウェアに確かに及ばないようにすることで防御


日々の活動としては、OSDBのメンバーは下記に従事する。

. エンドツーエンド（端から端まで）のコンプライアンスプロセスの確立。OSRBはエンドツーエンドのコンプライアンスプロセス、すなわち利用、監査、開発、関与、保障、コンプライアンス管理に責任を持つ。エンドツーエンドのコンプライアンスプログラムについては4章で概観する。
. コンプライアンスプログラムで使われるコンプライアンスポリシー、プロセス、ガイドライン、テンプレート、フォームを作成し保守 





. オープンソースの利用、改変、配布の申請をレビューする。OSRBはエンジニアリングや製品部門からのオープンソース利用申請 をレビューし承認する。利用のプロセスは6章で論じる。. Perform software audits: The OSRB performs audits on all software included in a product, which involves the following tasks:
. ソフトウェアベースに対しソースコードをスキャンするツールを適用Analyze the results provided by the scanning tool
. スキャンのツールで発見されたコード合致 、潜在的な合致、ライセンスの衝突を識別 . スキャンのツールで特定されたすべての問題が解決することを監督
. Create a final audit report and ensure that all identified issues have been closed


監査はOSRBか独立した監査チームかが組織の規模に応じて責任を持ち、コンプライアンスオフィサーに報告する。Chapter 6 provides a discussion of the auditing process.

. アーキテクチャのレビュー実行。承認過程の一つとして、OSRBはエンジニアリング部門の代表と共にアーキテクチャをレビューし、オープンソースのソースコード、プロプラエタリのコード 、サードパーティのソースコードの関係を解析する。本レビューの目的は、アーキテクチャのガイドラインが尊重され、オープンソース、プロプラエタリ、サードパーティのソフトウェアの関係が、現場が受け入れ可能な法的ガイドラインの範囲内に収まっていることを確認することである。. リンク解析をレビュー。OSRBはAPI呼び出し等によるリンク関係により、何らかのオープンソースのライセンス上の義務がプロプラエタリやサードパーティのソフトウェアに広がっていないかの確認のためリンク解析を行う 。






. オープンソースを含む製品のリリースやサービスの開始を取りやめる決定を検証. 社内のスタッフやエンジニアから寄せられるオープンソースに関する質問に対しガイダンスを提供
. 配布前の検証作業の一環としてコードの検査を実施。オープンソースライセンスのテキストや著作権表示が完全な形となっており、ソースコードに対して施された変更を反映するようエンジニアたちが変更ログ をアップデートしていることを確認
. 問題となっているオープンソースソフトウェアで満たすべきライセンス上の義務の一覧を作り、満たすよう関係部門に展開：OSRBがオープンソースを製品に利用することを承認したら、承認プロセスの一部としてOSDBは義務一覧を作り、関係する様々な個人やチームに展開して確実に満たすようにする 。配布前のプロセスの一部としてOSDBは製品やサービスのリリース前に最終チェックを行うが、義務を満たしていることの検証もここに含む。
. オープンソースとコンプライアンスの訓練を開発し提供。OSRBはオープンソースとコンプライアンスの訓練の開発を主導し、従業員が企業のオープンソースのポリシーやコンプライアンスのプロセスについて良く理解するようにする。更に、OSRBは最も広く利用されるいくつかのオープンソースのライセンス、商用でのオープンソース利用に関わる話題についても教育すべきである。この訓練はオープンソースを使ったソフトウェアの開発や管理に関わる従業員全員が受けなければならない。. 企業のオープンソースのウェブサイトをホストし維持。：従業員向けの内部のウェブサイトはオープンソースのプロセスやポリシー 、ガイドライン、訓練、告知が主となる。外部向けのサイトは通常、ソースコードのパッケージを利用可能とし、特定のコンプライアンス上の義務を満たすことが第一の目的となる。






. コンプライアンスの質問を取扱う。OSRBは企業に送付されたオープンソースのコンプライアンスに関わるあらゆる質問に答える責任がある。9章でコンプライアンスの質問を扱うプロセスを述べる。. Maintain records of compliance: OSRB is responsible for ensuring that all compliance records for any given open source software component are up to date.
. Review end-user documentation to ensure that appropriate copyright, attribution, and license notices are given to consumers regarding open source included in the product or the software stack. In addition, specific to the GPL/LGPL family of licenses, provide a written offer on how to obtain the source code, when applicable.
. Recommend new tools to be used as part of the compliance infrastructure that will contribute to making the compliance work more efficient through automation.
. Sign off on product distribution from an open source compliance perspective. . Develop community involvement policy, process, procedures, and guidelines. This responsibility is not compliance-related; however, it is listed here for completion of the list of responsibilities. 

LEGAL

The Legal Counsel is a core member of the OSRB, the committee that ensures compliance with open source licenses. The Legal Counsel focuses on four essential duties:

1. Provide approval regarding the use of open source in products or services
The approval of the Legal Counsel is required when using open source in a commercial product. Typically, the Legal Counsel reviews the compliance ticket in the online tracking system (for instance, JIRA or Bugzilla), the resulting report from the source code scanning tool, and the license 




information provided with the source code package. They then evaluate risk factors based on feedback provided by both engineering and the open source compliance officer. As part of this exercise, the Legal Counsel also decides on incoming and outgoing licenses of the software component in question. The incoming licenses are the licenses of all source code included in a given body of code; the outgoing licenses are the licenses under which the source code and/or object files are being made available to its recipients.
2. Advise on open source licensing
. Offer guidance about open source license obligations. . Advise on licensing conflicts arising from incompatible or conflicting licenses primarily based on company policy, which is some cases rely on external factors such as legal opinions of relevant open source organizations.
. Advise on IP issues associated with the use of open source. This is especially the case when the company is about to release previously proprietary source code under open source license(s).
. Provide recommendations and guidance to engineering teams on open source questions and concerns.



3. Review and approve updates to end-user documentation
This form of legal support is related to ensuring that appropriate open source notices (copyright, attributions, and license notices) are provided to consumers in relation to any open source included in the product. In addition, if there is source code licensed under one of the GPL/LGPL family of licenses, a written offer needs to be provided along with information on how to obtain the source code.





4. Contribute to the startup and ongoing management of the open source compliance program

. Establish and maintain the open source policy and process. . Handle inquiries sent to the company in relation to open source compliance.
. Provide training around open source licenses, company policies, and guidelines.


ENGINEERING AND PRODUCT TEAMS

Engineering and product teams may have one or more representatives who participates in the OSRB, tracks down all compliance-related tasks assigned to engineering, and ensures proper resolution. In parallel, engineering and product teams have several responsibilities with respect to open source compliance:

. Submit requests to use open source software: Engineering and product teams decide what external software to bring into the product baseline, including third-party and open source. Their primary responsibility from a compliance perspective is to submit a usage form for any open source that is planned for inclusion in a product or service. The form describes the intended use of the open source in question and helps construct and maintain a good record of software origin and provenance. . Follow technical compliance guidelines: Engineering and product teams should follow OSRB technical guidelines to architect, design, integrate, and implement source code. The OSRB guidelines typically cover:
. Common mistakes and how to avoid them
. Rules to follow when integrating libraries and other middleware to avoid linkage issues that might arise


. Development in kernel space versus user space (on Linux), especially with whole-platform development in embedded environments
. Specific engineering situations that are applicable to open source compliance



. Conduct design reviews: Engineering teams should continuously conduct design reviews to discover and remedy any compliance issues in a timely manner. The Compliance Officer drives the design reviews and invites different engineering participants depending on the software component in question.
. Cooperate with OSRB: Engineering teams must respond promptly to questions asked by the OSRB and cooperate in resolving compliance tickets.
. Track changes: Maintain a change log for each modified open source component: As part of meeting the open source license obligations and depending on the open source license in questions, some licenses (such as the GPL/LGPL family of licenses) mandate that modified files carry prominent notices stating that you changed the files and the date of the change(s).
. Prepare source code packages for distribution: Engineering teams prepare the source code packages that will be made available on a public website as part of meeting open source license obligations (other source code distribution methods are discussed in a later chapter). . Integrate compliance milestones as part of the development process: This exercise takes place in collaboration with the OSRB and the Compliance Officer. . Undergo open source training: All engineers must take the available open source training. . Monitor the open source projects to determine whether any bug fixes or security patches have become available, and take responsibility for updating the open source component used in the product. The individual package owner within the organization usually performs this specific task. 

COMPLIANCE OFFICER

The Compliance Officer, also called OSRB Chair or Manager/Director of Open Source, chairs the OSRB and manages the compliance program.
Ideally, the compliance officer must possess as many as possible of the following:

. Solid understanding of common open source licenses and obligations to discuss with legal counsel Knowledge of industry practices
. Knowledge and experience in establishing corporate-wide policies and processes . Technical knowledge related to the company’s products . Historical perspective on open source . Knowledge of community consensus and practices
. Contacts in the key open source project communities . Contacts in the open source organizations such as the Linux Foundation, Apache Foundation, Mozilla Foundation, Software Freedom Law Center, etc. 

In addition to the responsibilities pertaining to the OSRB, the Compliance Officer carries the following duties:

. Drive the compliance due diligence end-to-end process and act as the compliance program manager, ensuring all compliance-related tasks are addressed and there are no compliance issues blocking products from shipping






. Coordinate source code scans and drive all auditing issues to closure
. Participate in engineering design reviews, code inspections, and distribution readiness assessments to assure that the engineering and product teams follow all compliance processes and policies and conform to the approved OSRB usage form
. Coordinate source code distribution of open source packages (when stipulated by licenses) with engineering and product teams, including preparing and verifying a distribution checklist for each open source package
. Act as liaison between OSEC and OSRB
. Escalate compliance issues to OSEC . Act as liaison between the engineering and product team and the OSRB and OSEC in regard to usage plan approval processes
. Report on compliance activities to the OSEC, including flagging issues that prevent shipping a product or service


OPEN SOURCE EXECUTIVE COMMITTEE
The Open Source Executive Committee (OSEC) consists of engineering, legal, and product marketing executives in addition to the Compliance Officer. The OSEC is responsible for setting open source strategy, reviewing and approving release of IP, and providing approvals to release previously proprietary source code under a specific open source license.
DOCUMENTATION
The documentation team is responsible for including written offers and any appropriate open source notices in the product documentation. Figure 9, on the next page, provides an illustration of how such notices are prepared and approved. The process starts with the compliance officer, who prepares the draft of the written offer and the notices that are to be made available once the product ships. Next, the legal counsel reviews the draft proposed by the compliance officer, edits it, and pushes a final version to the documentation team. The last step of the process is including the final text in the product documentation. 


Figure 9. The role of the documentation team in updating the product documentation, reflecting the presence of open source in the product

LOCALIZATION

The localization team is responsible for translating basic language that informs users of the availability of open source software in the product and directs them to the proper notices made available in English.
SUPPLY CHAIN
Supply chain (software procurement) procedures must be updated to address the acquisition and use of open source. It is highly recommended that you examine software supplied to you by third-party software providers. Supply Chain personnel are usually involved in moving software from the suppliers to your company. Supply Chain can support open source compliance activities by mandating that third-party software (and hardware) providers disclose any open source that is being delivered with their wares, and by assisting with licensing-in third-party software that is bundled with and/or integrates open source packages.

A best practice in this area is to mandate that third-party software providers disclose any open source used in their offering, along with a statement on how they plan to meet the applicable open source license obligations. If third-party software includes open source, Supply Chain must ensure that open source license obligations are satisfied, since, after initial ingress, those obligations become your responsibility as distributor of a product or service that includes open source. It is not acceptable to point “upstream” to a supplier and to inform recipients of your code that meeting license obligations was the responsibility of the supplier instead of your own.
IT

IT provides support and maintenance for the tools and automation infrastructure employed by a compliance program. This responsibility spans the servers hosting the various tools, the tools, mailing lists, and web portals. In addition, IT may receive requests from the OSRB to develop and/
or acquire tools that will be used to improve effectiveness the compliance activities.
CORPORATE DEVELOPMENT

Corporate Development is involved with open source compliance in two major scenarios: mergers and acquisitions transactions, and outsourced development.
Mergers and Acquisitions

If a company is considering a merger or is the target of an acquisition, it should structure its compliance program to offer a level of disclosure and provide representations. Company policies regarding merger and acquisition transactions need to be updated to account for open source. Corporate Development must mandate that source code be evaluated from a compliance perspective prior to any merger or acquisition to avoid surprises that might derail discussions or affect the company’s valuation. For the acquiring company, comprehensive code evaluation assures accurate valuation of software assets and mitigates the risk of unanticipated licensing issues undermining future value. In addition, the acquiring company may include provisions in the purchase agreement requiring the disclosure of open source that is subject to the transaction. Diligence practices should be updated to require open source disclosure and include guidance regarding the review of any disclosed open source and licenses.
Outsourced Development

Agreements relating to outsourced development of software should also be updated to reflect compliance procedures and to ensure that other provisions of these agreements (such as representations and warranties) are broad enough to cover the risks posed by open source. Corporate Development must mandate that all source code received from outsourced development centers must go through the compliance process to discover all open source being used and to ensure proper actions to fulfill license obligations.

Other Corporate Transactions 
Corporate Development is also involved with compliance in transactions such as spin-offs and joint ventures. In some cases, the compliance due diligence may result in a decision not to proceed with the transaction, if that the compliance situation proves far from ideal. 




第4章

オープン ソース コンプライアンス プロセス

オープン ソース コンプライアンス プロセスの実現は、コンプライアンスを組み込む必要がある開発プロセス、コードのサイズと数、関連する製品とサービスの数、外部から導入されたコード量、組織のサイズや体制など、多くの要因に基づいて、組織ごとに変化します。しかし、コンプライアンスの中心的要素は、通常同じです：コード中のオープン ソースを特定し、レビューし、利用を許可し、義務を順守することです。この章では、コンプライアンス プロセスの中心的要素に焦点を当てます。コンプライアンス精査の結果は、外部出荷を意図した製品において使われる全てのフリー オープン ソース ソフトウェアの特定と、それに付随するライセンス義務を遵守するための計画です。図10は、一貫したコンプライアンス プロセスの高水準の概要図の一例を提示しており、外部出荷される製品やサービスへの統合許可を受ける前にフリー オープン ソース ソフトウェアを含むコンポーネントが通過する様々なコンプライアンス ステップやフェーズを図示しています。

 
図10一貫したコンプライアンス プロセスの簡略図

図10に示されているのは一例であり、同じ目的を達成するためにコンプライアンス プロセスを作る方法は多くあります。この章を通じて、これらの様々なフェーズ、各フェーズのインプットとアウトプット、そしてコンプライアンス プロセスによってソフトウエア利用をどのように管理するかを確認していきます。 




効果的なコンプライアンス
精査（due diligence）という用語は、ソース コード検査、ソース コード監視、品質義務やシステム監査の実行などを含む多くの概念を指しています。オープン ソース コンプライアンスのこのケースでは、精査は、以下の項目の確認を要求されるものとします；

. 製品で利用されるオープン ソース ソフトウェアは、特定され、レビューされ、承認されている。製品実装は、承認されたオープン ソース コンポーネントとライセンスのみを含む。
. ライセンスされたものの利用に関する全ての義務は、特定されている。適切な通知は、帰属表記や著作権表記を含む文書で提示されている。変更（適用可能な場合）を含むソース コードは準備されて、製品出荷の時点で入手可能になっている。プロセス中の全段階の検証


簡潔で、組織内で十分に理解されている一貫したコンプライアンス プロセスを持つことには大きな利点があります。そのようなプロセスは：

. 組織に義務を履行させつつ、一方で組織がオープン ソースから恩恵を得られるようにします。オープン ソース利用を一時的なものから標準プロセスへと移行させます。オープン ソース コンポーネント入手の管理を助けます。従業員が、責任ある方法でオープン ソースとどのように取り組めばよいか理解するのを助けます。組織で利用している様々なオープン ソース プロジェクトの開発者との関係を改善します。 





. ソース コード変更の共有を行うことで、統合コードのプロジェクト コミュニティとの間で、情報やアイディアの交換が加速されます。組織は安全にオープン ソース コンポーネントを採用して、新しいサービスや製品の立ち上げに必須のものとして利用できるので、イノベーションを加速できます。 

一貫したコンプライアンス プロセスの要素

一貫したコンプライアンス プロセスの10ステップ

1. 入るソース コードの特定

2. ソース コードの監査

3. 監査で検出された課題の解決
4. 適切なレビューの完了

5. オープン ソース利用の承認受領

6. ソフトウェア リストへのオープン ソースの登録

7. オープン ソース利用を反映した製品文書の更新
8. 頒布前の上記全段階の検証

9. ソース コード パッケージの頒布
10. 頒布に関連した最終検証の実施 






図11一貫したコンプライアンス プロセス
この章の残りの部分では、これらの10ステップについて詳しく説明します。

ステップ1オープン ソースの特定
この最初のステップの目的は、標準パッケージや、サード パーティか自社開発ソフトウェアに組み込まれた形で、オープン ソースがソフトウェア ポートフォリオに入り込んだり統合されたりすることを監視することです。製品に利用されるオープン ソースを特定するいくつかの方法があります。

. オープン ソース利用の要求：これは、製品中のオープン ソース利用を特定する最も普通の方法です。技術担当か製品マネージャは、OSRB（3章で説明）かコンプライアンス チームに特定製品やプラットフォーム リリースに特定のオープン ソースを利用したい旨を通知することが求められています。申請者は、レビューと承認の対象であるオープン ソース パッケージの計画した利用に関して情報を提供します。. コンプライアンス基盤として確立するために、全プラットフォームや製品コード ベースを監査し、その上で、後続のリリースで変更されたコード モジュールを監査する。
. サード パーティ ソフトウェア プロバイダー精査：これは、オープン ソース コンプライアンス チームによる開示内容のレビューを伴う、サード パーティ供給者によって提供された製品中にあるオープン ソース コンポーネントの全開示を要求します。あるケースでは、精査の追加として、供給コードの監査結果をサード パーティ ソフトウェア ベンダーに要求することも意味があります。これは、製品へ入るオープン ソースの管理を確実にします。. プロプライエタリ（自社開発の） ソフトウェア コンポーネントの監査：例として、技術者が、オープン ソース コンポーネントにあるソース コードをコピー／ペーストして、プロプライエタリ ソフトウェアに加えるかもしれません。それゆえに、製品出荷日前に発見されなければコンプライアンス違反に陥るようなオープン ソース コードを含んでいるかもしれませんので、自社開発ソフトウェア コンポーネントを監査することは重要です。
. 組織のソース コード リポジトリに入る、オープン ソースの利用要求に対応していない全オープン ソース コンポーネントの検査：オープン ソース利用の意図のフォームへの記載を技術者に頼るのは、全ての入るオープン ソース ソフトウェアを説明するには必ずしも確実な方法とはいえません。それゆえに、バックアップとして、オープン ソース用の分離したフォルダーを持つソース コード管理システムの準備と、このフォルダーにチェックインがされた時の警告を検討して下さい。オープン ソースと自社開発プロプライエタリ ソフトウェアとサード パーティ ソフトウェアをビルド システムで別のフォルダーに分離しておくのは常に奨励されるプラクティスですから、新しいコードが提出された時に警告が出るようにすることはできます。既存の利用（オープン ソース要求）フォームに対応しない新しいコンポーネントが提出されたら、それは新しいコンポーネントであり、新しいフォームに記入する必要があります。 

特定フェーズの前提条件

以下条件の一つが満たされる：

. 特定のオープン ソース利用を要求する入るOSRBフォームプラットフォーム スキャンによって（適切な承認なしに）利用されているオープン ソースの発覚 



. サード パーティ ソフトウェアの一部として利用されているオープン ソースの発覚 

特定フェーズの結果
. コンプライアンス記録は、オープン ソースに対して生成（更新）されます。ソース コードをスキャンするように、監査が要求されます。


ステップ 2 . ソース コードの監査
コンプライアンス精査の2番目のステップは、既知のオープン ソース プロジェクトとの一致を検出する自動解析ツールを使ったスキャンで構成されます。

監査担当者は、リリースに含まれているものは様々な適用可能なオープン ソース ライセンスに適合している証拠を、リリースごとに反復して、ソースコードスキャンを実施します。

監査の目的は：

. 最後のスキャンからの間に、加えられた（削除された）オープン ソースを説明するリリースBOMを更新します。オープン ソースの由来も含めて、ソース コードの由来を確認します。全ての依存関係、コード一致、ライセンス矛盾にフラグを付けます。


監査フェーズの前提条件

適切なコンプライアンス記録（チケットとも呼ばれます）は、特定のオープン ソース利用に関する全ての必要な情報を補足し、内部ビルドシステム内のソース コードの場所を提供するように、作成されます。ある場合には、特にプラットフォームのフル スキャンが実施される時、適切なコンプライアンス報告が作成される前に、オープン ソース コンポーネントはスキャンされることもあります。この場合には、オープン ソース コンポーネントが発見された時に、記録が作成されます。





監査フェーズの結果
. ソース コードの出自とライセンスを特定する監査報告. 変更要求チケットは、適切な技術チームに対して、監査中に特定された解決すべき課題について記載されます。 

いくつかの活動が、ソフトウェア コンポーネントの発見と監査の契機となります。（図12、次ページ）
. 開発者からのオープン ソース コンポーネント利用の要求. 全ソフトウェア スタックのソース コード スキャン以前に承認されたコンポーネントでのソース コード変更サード パーティ ベンダーから受け取ったオープン ソースウェブからダウンロードされたソース コード（著者やライセンスが不明）ソース コード リポジトリへ提出されるプロプライエタリ ソフトウェアコード リポジトリへ追加された、利用申請フォームに対応していないオープン ソース以前、異なる製品で承認を受けたオープン ソースの利用





 

図12入るオープン ソースの特定と監査の方法





ステップ3課題解決
コンプライアンス精査のこのステップでは、監査ステップで特定された全ての課題が解決されます。OSRBチェアは、監査ステップで技術者に割り当てられたチケットのクローズを監視します。技術者が特定された課題を解決した時には、OSRBチェアは、解決された課題がもはや存在しないことを確認するために監査を要求するべきです。
課題解決フェーズの前提条件

ソース コード スキャンが完了し、ソース コードの出自とライセンスを特定した監査報告が生成される。報告は、特定されていないソース コード ファイルや、異なるライセンスで結合されるソース コードによって生じるライセンス矛盾にフラグを付けます。コンプライアンス オフィサーは、これらの課題解決を推進します。

課題解決フェーズの結果
報告にあるフラグ付きのファイルの解決と、フラグ付きのライセンス矛盾の解決
ステップ4レビュー
監査が完了し、以前に特定された全ての課題が解決されたら、特定のソフトウェア コンポーネントに対するコンプライアンス チケットは、レビュー ステップへ移動します。図13（次ページ）に示すように、様々なレビューが実施され、特定された全ての課題は解決していなければなりません。レビュアーは、ソフトウェアの利用、変更、頒布を支配するライセンスを理解し、様々なライセンスの義務を特定する必要があります。与えられたソフトウェア コンポーネントに対する、コンプライアンス チケットのレビュアーは、
. 社内パッケージ所有者（特定のソース コード コンポーネントの開発者）ソース コード スキャンか監査の担当者






. OSRBチェア、法務担当、およびOSRB技術代表からなるOSRB (オープン ソース レビュー ボード)OSEC （オープン ソース エグゼクティブ ボード）




図13コンプライアンス チケットのレビュアーとその役割

コンプライアンス精査のこのステップの一部として、2つの重要なレビューがあります：アーキテクチャー レビュー、リンク解析レビュー





アーキテクチャー レビュー

アーキテクチャー レビューの目的は、オープン ソース、サード パーティ、プロプライエタリ コード間の相互作用を解析することです。アーキテクチャー レビューの結果は、オープン ソース コンポーネントからプロプライエタリ コンポーネントへ（その逆も）影響を与えるライセンス義務の解析です。社内パッケージ所有者、OSRB技術代表、そしてオープン ソース エキスパートが、アーキテクチャ レビューを行います。もしライセンスの矛盾になるような依存関係を発見した場合、コンプライアンス オフィサーは、ソース コードの再作業によって依存関係問を題解決するためにチケットを技術担当に発行する。

リンク解析レビュー
リンク解析の目的は、動的および静的リンク レベルで、GPL ライブラリをプロプライエタリ ソース コード コンポーネントにリンクしているなど、問題発生の可能性のあるコードの組み合わせ を検出することです。OSRB チェアは、自動ツールを使用してこの調査を行います。リンク問題は、解決するように技術担当に報告されます。

レビュー フェーズの前提条件

監査されたソース コード、解決されている全ての課題。

レビュー フェーズの結果
OSRBメンバーは、特定のコンポーネントに対してアーキテクチャ レビューとリンク解析を実施し、もし課題が発見されなければ、次のステップ（つまり承認）への準備が整っているという印をつけます。

ステップ5承認
全てのレビューが完了したら、ソフトウェア コンポーネントのコンプライアンス チケットは、製品に利用して良いかを決定する承認ステップへ移動します。承認はOSRBが行います。（前の章で説明したように、法務担当、技術代表、オープン ソース エキスパートが含まれます） 




ほとんどのソフトウェア コンポーネントに対して、チケットがコンプライアンス プロセスのこの点まで進めば、承認が与えられます。OSRBがオープン ソース コンポーネントの利用を承認したら、OSRBは製品チームに承認を伝えますので、製品チームは責任を理解し、ライセンス義務履行の準備を始めます。OSRBがオープン ソース コンポーネントの利用を却下する場合、OSRBは却下の理由を要求者に伝え、この情報はコンプライアンス チケットの一部として記録されます。要求者はOSRBに再考を促すことは可能ですが、結果としては、オープン ソース コンポーネントは製品に使用できません。

承認フェーズの前提条件

全てのOSRBメンバーはコンプライアンス チケットをレビューし、OSRBはアーキテクチャー レビューとリンク解析を完了している。

承認フェーズの結果
特定コンポーネントの利用の承認または却下

ステップ6登録
ソフトウェア コンポーネントが製品やサービスへの利用を承認されたら、コンプライアンス チケットは、承認を反映するように更新されます。ソフトウェア コンポーネントは、オープン ソース利用とユースケースを記録したソフトウェア一覧表に加えられます。

保守的なアプローチの後にコンプライアンス プラクティスを進めるならば、特定のバージョンと、特定の製品やサービスバージョンでの利用に対して、オープン ソース ソフトウェアを承認します。このオープン ソース ソフトウェアの新しいバージョンが入手可能になったら、利用形態とライセンスが内部ポリシーと整合していることを確認するために新しい承認依頼を出します。
登録フェーズの前提条件

OSRBはコンポーネントの製品への利用を承認している。





登録フェーズの結果
コンポーネントは、コンポーネント名、バージョン、内部所有者、および製品名、バージョン、リリース番号等のコンポーネントが利用される場所の詳細などと共に、ソフトウェア一覧表に登録されます。
ステップ7通知
オープン ソースを利用する際の重要な責務の一つは、ドキュメント記載の義務、または通知義務ともいわれるものです。外部に提供する製品やサービスにオープン ソースを利用している企業は以下を行う必要があります：

. エンド ユーザーに、ライセンス義務を満たした結果として入手可能になっているソース コードのコピーをどのおうに入手できるかを通知します（必要に応じて）必要な著作権や帰属を通知することで、オープン ソースを利用していることを知らせます。. 製品に含まれているオープン ソース コードに対応するライセンスの全文を提示します。 

オープン ソース ライセンス義務を順守しない企業は、ライセンスを取得できず、著作権を侵害したとして、著作権所有者に法的行動をさらされる可能性があります。また、対象となるソフトウェアを使用および配布する権利を失う可能性があります。ドキュメント記載義務を履行するには、製品に適切な通知を含める必要があります。コンプライアンス精査の中のこのステップでは、OSRB チェアが通知文を準備し、それを各担当部署に手渡します 。
通知フェーズの前提条件

ソフトウェア コンポーネントについて、使用が承認され、ソフトウェア一覧表への登録が完了している。





通知フェーズの結果
対象のコンポーネントのライセンス、著作権、および帰属通知が準備され、製品の資料に含めるべく担当部署に手渡される。

ステップ8. 頒布前検証
コンプライアンス精査の次のステップは、頒布の方法とモード、頒布するパッケージのタイプ、および頒布メカニズムを決定することです。
頒布前検証の目的は、以下を確実にすることです：

. 頒布されることになっているオープン ソース パッケージは、特定され、承認されている。. ソース コード パッケージ（変更を含む）は、製品として出荷されるバイナリと一致することが確認されている。適切な通知が、製品文書に含まれていて、エンド ユーザーに特定のオープン ソースのソース コードを要求する権利があることを知らせている。全てのソース コード コメントはレビューされ、不適切な内容は取り除かれている。これは厳密にはコンプライアンスの課題ではないですが、しかしながら、ある場合には、コードが受け取られた場所に関する無邪気なコメントが大きなコンプライアンスに関する問い合わせを生むきっかけになる可能性があります。 

頒布前検証フェーズの前提条件

コンポーネントは利用が承認され、ソフトウェア一覧表に登録され、全ての通知が収集され義務履行のために送付されている。 




頒布前検証フェーズの結果
. 頒布方法と様式を決定します
. 全ての頒布前検証が問題なく完了していることを確実にします。


ステップ9頒布

頒布前検証が全て完了したら、対応する製品とバージョンをラベル付けして（このシナリオは、ソース コードを入手可能になることを想定しています。他の方法は後続の章で議論します。）、オープン ソース パッケージを頒布用ウェブサイトにアップロードします。この作業は、コードのダウンロードを希望する人には役に立ちますが、これ自体でライセンス義務を満たしていることにはなりません。更に、推奨プラクティスでは、コンプライアンスやオープン ソースに関係する問い合わせの受付に関する、電子メールや住所などの情報を提供します。
頒布フェーズの前提条件

全ての頒布前検証がチェックされ、問題が発見されていない。

頒布フェーズの結果
対象のコンポーネントのソース コードは、頒布用のウェブサイトにアップロードされる。（そういう頒布方法が選択された場合）

ステップ10最終検証
オープン ソース パッケージを頒布用のウェブサイトにアップロードしたら、パッケージが正しくアップロードされ、ダウンロードでき、エラー無しに外部コンピューターで解凍できることを確認します。もし、パッチを提供する時には、それが容易に適用できること、アップストリーム コンポーネントの適切なバージョンを特定していることを確認します。





最終検証フェーズの前提条件

ソース コードはウェブサイト上で公開される。

最終検証の結果
ソース コードは正しくアップロードされ、ダウンロード可能で、承認されたものと同じバージョンに対応しているという確認結果を受けます。 
